"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.drawCard = void 0;
const core_1 = require("@discord-card/core");
const canvas_1 = require("canvas");
const lib_1 = require("../lib");
const dry_1 = require("./dry");
const w = 700, h = 250;
function drawCard(options) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
    var _1, _2, _3, _4;
    return __awaiter(this, void 0, void 0, function* () {
        //const timer = new Timer('Drawcard').start();
        const timer = {
            step: (...args) => { },
            stop: (...args) => { },
        };
        const canvas = (0, canvas_1.createCanvas)(w, h);
        const ctx = canvas.getContext('2d');
        timer.step('created Canvas');
        //@ts-ignore
        let theme;
        (_a = options.card) !== null && _a !== void 0 ? _a : (options.card = {});
        (_b = (_1 = options.card).border) !== null && _b !== void 0 ? _b : (_1.border = true);
        (_c = (_2 = options.card).rounded) !== null && _c !== void 0 ? _c : (_2.rounded = true);
        (_d = (_3 = options.card).blur) !== null && _d !== void 0 ? _d : (_3.blur = true);
        (_e = options.avatar) !== null && _e !== void 0 ? _e : (options.avatar = {});
        (_f = (_4 = options.avatar).imageRadius) !== null && _f !== void 0 ? _f : (_4.imageRadius = 0.8);
        //Parsing the Theme
        if (typeof ((_g = options.theme) !== null && _g !== void 0 ? _g : 'code') === 'string') {
            theme = lib_1.themes[(_h = options.theme) !== null && _h !== void 0 ? _h : 'code'];
            if (!theme)
                throw new Error('Invalid theme, use: ' + Object.keys(lib_1.themes).join(' | '));
        }
        else
            throw new Error('Invalid theme, use: ' + Object.keys(lib_1.themes).join(' | '));
        ctx.drawImage(yield (0, dry_1.staticCard)(options), 0, 0, w, h);
        timer.step('add static');
        //Setting Styles
        ctx.fillStyle = ((_k = (_j = options.text) === null || _j === void 0 ? void 0 : _j.color) !== null && _k !== void 0 ? _k : theme.color).toString(ctx);
        //ctx.strokeStyle = theme.color.toString(ctx);
        ctx.font = '30px ' + ((_o = (_m = (_l = options.text) === null || _l === void 0 ? void 0 : _l.font) !== null && _m !== void 0 ? _m : theme.font) !== null && _o !== void 0 ? _o : 'SegoeUI') + ', SegoeUI, SegoeUIEmoji';
        //Drawing
        //Title
        if ((_p = options.text) === null || _p === void 0 ? void 0 : _p.title) {
            const txt = options.text.title;
            if (typeof txt === 'string') {
                (0, core_1.changeFontSize)(ctx, '30px').fillText(txt, w / 2.7, h / 3.5);
            }
            else
                txt.draw(canvas); //instanceof Text
        }
        //Text
        if ((_q = options.text) === null || _q === void 0 ? void 0 : _q.text) {
            const txt = options.text.text;
            if (typeof txt === 'string') {
                (0, core_1.changeFontSize)(ctx, (0, core_1.getFontSize)(txt) + 'px').fillText(txt, w / 2.7, h / 1.8);
            }
            else
                txt.draw(canvas); //instanceof Text
        }
        //Subtitle
        if ((_r = options.text) === null || _r === void 0 ? void 0 : _r.subtitle) {
            const txt = options.text.subtitle;
            if (typeof txt === 'string') {
                (0, core_1.changeFontSize)(ctx, '25px').fillText(txt, w / 2.7, h / 1.3);
            }
            else
                txt.draw(canvas); //instanceof Text
        }
        timer.step('text');
        //Avatar Image
        const radius = (h / 2) * ((_t = (_s = options.avatar) === null || _s === void 0 ? void 0 : _s.imageRadius) !== null && _t !== void 0 ? _t : 0.8);
        function applyShape(offset = 0) {
            var _a;
            if ((_a = options.avatar) === null || _a === void 0 ? void 0 : _a.borderRadius) {
                (0, core_1.roundRect)(ctx, h / 2 - radius - offset, h / 2 - radius - offset, radius * 2 + 2 * offset, radius * 2 + 2 * offset, options.avatar.borderRadius * radius);
            }
            else {
                ctx.beginPath();
                ctx.arc(h / 2, h / 2, radius + offset, 0, Math.PI * 2, true);
                ctx.closePath();
            }
            return ctx;
        }
        const { avatar } = options;
        if (avatar) {
            const avatarImage = avatar.image;
            const outlineWidth = (_u = avatar.outlineWidth) !== null && _u !== void 0 ? _u : 0;
            if (avatarImage) {
                applyShape(-outlineWidth).clip();
                ctx.drawImage(yield (0, core_1.toImage)(avatarImage), h / 2 - radius + ((_v = avatar.outlineWidth) !== null && _v !== void 0 ? _v : 0), //x
                h / 2 - radius + ((_w = avatar.outlineWidth) !== null && _w !== void 0 ? _w : 0), //y
                radius * 2 - ((_x = avatar.outlineWidth) !== null && _x !== void 0 ? _x : 0) * 2, //width
                radius * 2 - ((_y = avatar.outlineWidth) !== null && _y !== void 0 ? _y : 0) * 2 //height
                );
            }
        }
        timer.step('avatar');
        (0, lib_1.snap)(canvas);
        const buff = canvas.toBuffer((_0 = (_z = options.generation) === null || _z === void 0 ? void 0 : _z.format) !== null && _0 !== void 0 ? _0 : 'image/png');
        timer.step('buffer');
        timer.stop();
        return buff;
    });
}
exports.drawCard = drawCard;
//# sourceMappingURL=hydrate.js.map